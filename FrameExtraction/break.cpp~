#include "opencv2/opencv.hpp"
#include<opencv2/highgui/highgui.hpp>
#include<opencv2/imgproc/imgproc.hpp>
#include <string.h>
#include <cstdio>
#include<time.h>
#include<dirent.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <fstream>
#include<iostream>
#include<string.h>
using namespace cv;
using namespace std;

int main(int argc, char** argv)
{   string st= argv[1]; 
    
     if( argc < 2 )
     { printf("** Error. Usage: ./Project_Demo <complete path of the video>\n");
       return -1;
     }
    ofstream myfile;
    ifstream mfile;  
    char buff [70],buff2[70], buff1[20];
    int t,i=1,dir_count=0, video_load_check,blood,duration;
    clock_t clk;
    clk= clock(); 
    mfile.open("/home/rahul/test/Integrating/counter.txt");
    mfile>>dir_count;
    dir_count++;
    mfile.close();
    myfile.open("/home/rahul/test/Integrating/counter.txt");
    myfile<<dir_count;
    myfile.close();
    t=sprintf(buff1, "sample%d",dir_count);
    
    t=sprintf(buff2,"/home/rahul/test/Integrating/Samples/%s",buff1);
    const char* buff3= buff2;
    cout<<buff3;
    mkdir(buff3,S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);//creating the directory for sample space.
   

    t=sprintf(buff2,"/home/rahul/test/Integrating/Samples/%s/blood",buff1);
    const char* buff4= buff2;
    mkdir(buff4,S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);//creating the directory for detected blood.
 
    
    t=sprintf(buff2,"/home/rahul/test/Integrating/Samples/%s/temp",buff1);
    const char* buff5= buff2;
    mkdir(buff5,S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);//creating the directory for detected blood.
    
    ///performing frame reduction

   VideoCapture cap(st);
  	if(!cap.isOpened())  // check if we succeeded
          return -1;
	Mat edges;
        int ct=1,num=1;
        
        //strcpy(buff1, buff11.c_str());
   	namedWindow("edges",1);
   	
   	 for(;;){
        ct++;
	t= sprintf(buff,"/home/rahul/test/Integrating/Samples/%s/image%d.jpg",buff1,num);
        Mat frame;
        cap >> frame; // get a new frame from camera
	if (!frame.data)
        {
	cout<<"ooops";
            break;
        }
        cvtColor(frame, edges, CV_BGR2GRAY);
        GaussianBlur(edges, edges, Size(7,7), 1.5, 1.5);
        
        Canny(edges, edges, 0, 30, 3);
	imwrite(buff, frame);        
	imshow("edges", edges);
	
       if(waitKey(i) >= 0) break;
	num++;
    }

   /* video_load_check=initialpass(&buff1, st);//call for Extracting Frame from the video
    if(video_load_check==-1){
    cout<<" Unable to load Video";
    return 0;
    }
    histcomp(&buff1);// Applying Sample Space Reduction
    blood=bloodtest(&buff1);*/
    duration=ct/28;

     //creating a file to store the count of number of frames
    t=sprintf(buff2,"/home/rahul/test/Integrating/Samples/sample%d/frame_count.txt",dir_count);
    myfile.open(buff2,ios::app);
    myfile<<ct;
    myfile.close();
    
   //clock for time calculation
    clk= clock() - clk;
    float f = float(clk/CLOCKS_PER_SEC);
    cout<< clk;
    // saving the execution time of frame extraction in a file
   t=sprintf(buff2,"/home/rahul/test/Integrating/Samples/sample%d/time_total.txt",dir_count);
   myfile.open(buff2);
   myfile<<f;
   myfile.close();

 // maintaing a central log file
  myfile.open ("/home/rahul/test/Integrating/Samples/Processing_time_log.txt",ios::app);
   myfile << "For the input file "<<st<<"\n "<<"Frame Extraction Time of "<<ct<<" number of Frames is :"<<f<<"seconds" <<"\n";
  myfile.close();
    // the camera will be deinitialized automatically in VideoCapture destructor
    return 0;
}
